@mixin customTransition($first-property, $second-property: false, $third-property: false) {
  $duration: 250ms;
  @if $second-property {
    @if $third-property {
      transition: $first-property $duration var(--timing-function),
        $second-property $duration var(--timing-function),
        $third-property $duration var(--timing-function);
    } @else {
      transition: $first-property $duration var(--timing-function),
        $second-property $duration var(--timing-function);
    }
  } @else {
    transition: $first-property $duration var(--timing-function);
  }
}
// Calculating line-height value to multiplier
@function setLineHeight($lh, $fs) {
  $lh-no-units: strip-unit($lh);
  $fs-no-units: strip-unit($fs);

  $lh-value: $lh-no-units / $fs-no-units;

  $line-height: decimal-round($lh-value, 2);

  @return $line-height;
}

// Delete unit from incoming value
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}
@function decimal-round($number, $digits: 0, $mode: round) {
  $n: 1;
  // $number must be a number
  @if type-of($number) != number {
    @warn '#{ $number } is not a number.';
    @return $number;
  }
  // $digits must be a unitless number
  @if type-of($digits) != number {
    @warn '#{ $digits } is not a number.';
    @return $number;
  } @else if not unitless($digits) {
    @warn '#{ $digits } has a unit.';
    @return $number;
  }
  @for $i from 1 through $digits {
    $n: $n * 10;
  }
  @if $mode == round {
    @return round($number * $n) / $n;
  } @else if $mode == ceil {
    @return ceil($number * $n) / $n;
  } @else if $mode == floor {
    @return floor($number * $n) / $n;
  } @else {
    @warn '#{ $mode } is undefined keyword.';
    @return $number;
  }
}
